# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import cross_val_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df_hiring = pd.read_csv('/content/hiring 2024-05-24 05_26_29.csv')

# Fill NaN values in experience with 0
df_hiring['experience'].fillna(0, inplace=True)

# Fill NaN values in test_score(out of 10) with median
median_test_score = df_hiring['test_score(out of 10)'].median()
df_hiring['test_score(out of 10)'].fillna(median_test_score, inplace=True)

# Mapping experience text to numeric values
experience_mapping = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,
                      'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9, 'ten': 10, 'eleven': 11}

df_hiring['experience'] = df_hiring['experience'].replace(experience_mapping).astype(int)

# Create the linear regression model
reg = LinearRegression()

# Train the model
reg.fit(df_hiring[['experience', 'test_score(out of 10)', 'interview_score(out of 10)']],
        df_hiring['salary($)'])

# Model coefficients and intercept
coefficients = reg.coef_
intercept = reg.intercept_

print("Coefficients:", coefficients)
print("Intercept:", intercept)

# Make predictions on the training set
predictions = reg.predict(df_hiring[['experience', 'test_score(out of 10)', 'interview_score(out of 10)']])

# Evaluate the model
mse = mean_squared_error(df_hiring['salary($)'], predictions)
r2 = r2_score(df_hiring['salary($)'], predictions)

print("Mean Squared Error:", mse)
print("R-squared:", r2)

# Perform cross-validation
cv_scores = cross_val_score(reg, df_hiring[['experience', 'test_score(out of 10)', 'interview_score(out of 10)']],
                            df_hiring['salary($)'], cv=5)

print("Cross-validation scores:", cv_scores)
print("Average cross-validation score:", cv_scores.mean())

# Predict the salary for a candidate with 14 years experience, 9 test score, and 7 interview score
predicted_salary = reg.predict([[14, 9, 7]])
print("Predicted Salary for 14 years experience, 9 test score, 7 interview score:", predicted_salary)

# Data Visualization
sns.pairplot(df_hiring)
plt.show()
